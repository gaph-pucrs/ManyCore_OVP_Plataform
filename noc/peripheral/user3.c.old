
////////////////////////////////////////////////////////////////////////////////
//
//                W R I T T E N   B Y   I M P E R A S   I G E N
//
//                             Version 20170201.0
//
////////////////////////////////////////////////////////////////////////////////

#include "router.igen.h"
//////////////////////////////// Callback stubs ////////////////////////////////

PPM_REG_READ_CB(dataCountRead) {
    return *(Uns32*)user;

}

PPM_REG_WRITE_CB(dataCountWrite) {
    // YOUR CODE HERE (dataCountWrite)
    *(Uns32*)user = data;
}

PPM_PACKETNET_CB(pktTrigger) {
    if (bport1_regs_data.dataCount.value == 0){
        unsigned int rx_data1 = *(unsigned int *)data;

        bhmMessage("I", "RX1", "bytes=%d rx_reg1=%x UD=%d\n", bytes, rx_data1, (Uns32)userData);
        bport1_regs_data.rx_reg1.value = rx_data1;

        bport1_regs_data.dataCount.value=1;
    }
    else{
        unsigned int rx_data2 = *(unsigned int *)data;
        bport1_regs_data.dataCount.value=0;

        bhmMessage("I", "RX2", "bytes=%d rx_reg1=%x UD=%d\n", bytes, rx_data2, (Uns32)userData);
        bport1_regs_data.rx_reg2.value = rx_data2;

        ppmWriteNet(handles.INTTC, 1);
    }
}

PPM_REG_READ_CB(rxRead1) {
    //ppmWriteNet(handles.INTTC, 0);
    return *(Uns32*)user;
}

PPM_REG_READ_CB(rxRead2) {
    ppmWriteNet(handles.INTTC, 0);
    return *(Uns32*)user;
}

PPM_REG_WRITE_CB(rxWrite1) {
    // YOUR CODE HERE (rxWrite1)
    *(Uns32*)user = data;
}

PPM_REG_WRITE_CB(rxWrite2) {
    // YOUR CODE HERE (rxWrite2)
    *(Uns32*)user = data;
}

PPM_REG_READ_CB(txRead1) {
    // YOUR CODE HERE (txRead1)
    return *(Uns32*)user;
}

PPM_REG_READ_CB(txRead2) {
    // YOUR CODE HERE (txRead2)
    return *(Uns32*)user;
}

PPM_REG_WRITE_CB(txWrite1) {
    unsigned int tx_data1 = data; 

    bhmMessage("I", "TX1", "%x\n", tx_data1);

    ppmPacketnetWrite(handles.pktPort, &tx_data1, sizeof(tx_data1));
    *(Uns32*)user = data;
}

PPM_REG_WRITE_CB(txWrite2) {
    unsigned int tx_data2 = data; 

    bhmMessage("I", "TX2", "%x\n", tx_data2);

    ppmPacketnetWrite(handles.pktPort, &tx_data2, sizeof(tx_data2));
    *(Uns32*)user = data;
}

PPM_CONSTRUCTOR_CB(constructor) {
    // YOUR CODE HERE (pre constructor)
    periphConstructor();
    // YOUR CODE HERE (post constructor)
}

PPM_DESTRUCTOR_CB(destructor) {
    // YOUR CODE HERE (destructor)
}


PPM_SAVE_STATE_FN(peripheralSaveState) {
    bhmMessage("E", "PPM_RSNI", "Model does not implement save/restore");
}

PPM_RESTORE_STATE_FN(peripheralRestoreState) {
    bhmMessage("E", "PPM_RSNI", "Model does not implement save/restore");
}

